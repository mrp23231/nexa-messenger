#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Nexa Messenger - –£–ª—å—Ç—Ä–∞ –ø—Ä–æ—Å—Ç–∞—è –Ω–∞–¥–µ–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è
–° –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –æ—Ç–ª–∞–¥–∫–æ–π
"""

import os
import traceback
from flask import Flask, request, redirect, url_for

# –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        import sqlite3
        conn = sqlite3.connect('nexa_messenger.db')
        c = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                email TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                display_name TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π
        c.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                sender_id INTEGER NOT NULL,
                receiver_id INTEGER NOT NULL,
                content TEXT NOT NULL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        traceback.print_exc()
        return False

def create_user(username, email, password, display_name):
    try:
        import sqlite3
        conn = sqlite3.connect('nexa_messenger.db')
        c = conn.cursor()
        
        c.execute('''
            INSERT INTO users (username, email, password, display_name)
            VALUES (?, ?, ?, ?)
        ''', (username, email, password, display_name))
        
        conn.commit()
        conn.close()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        traceback.print_exc()
        if 'conn' in locals():
            conn.close()
        return False

def get_user_by_username(username):
    try:
        import sqlite3
        conn = sqlite3.connect('nexa_messenger.db')
        c = conn.cursor()
        c.execute('SELECT * FROM users WHERE username = ?', (username,))
        user = c.fetchone()
        conn.close()
        return user
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        if 'conn' in locals():
            conn.close()
        return None

def get_all_users():
    try:
        import sqlite3
        conn = sqlite3.connect('nexa_messenger.db')
        c = conn.cursor()
        c.execute('SELECT id, username, display_name FROM users')
        users = c.fetchall()
        conn.close()
        return users
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        if 'conn' in locals():
            conn.close()
        return []

def save_message(sender_id, receiver_id, content):
    try:
        import sqlite3
        conn = sqlite3.connect('nexa_messenger.db')
        c = conn.cursor()
        c.execute('''
            INSERT INTO messages (sender_id, receiver_id, content)
            VALUES (?, ?, ?)
        ''', (sender_id, receiver_id, content))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        if 'conn' in locals():
            conn.close()
        return False

def get_messages_between_users(user1_id, user2_id):
    try:
        import sqlite3
        conn = sqlite3.connect('nexa_messenger.db')
        c = conn.cursor()
        c.execute('''
            SELECT * FROM messages 
            WHERE (sender_id = ? AND receiver_id = ?) 
            OR (sender_id = ? AND receiver_id = ?)
            ORDER BY timestamp ASC
        ''', (user1_id, user2_id, user2_id, user1_id))
        messages = c.fetchall()
        conn.close()
        return messages
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        if 'conn' in locals():
            conn.close()
        return []

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
current_user = None

# HTML —à–∞–±–ª–æ–Ω—ã –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∫–æ–¥
LOGIN_HTML = '''
<!DOCTYPE html>
<html>
<head>
    <title>Nexa Messenger - –í—Ö–æ–¥</title>
    <style>
        body { font-family: Arial; background: #f0f0f0; padding: 50px; }
        .container { max-width: 400px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
        input { width: 100%; padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px; }
        button { width: 100%; padding: 10px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; }
        .error { color: red; margin: 10px 0; }
        .success { color: green; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üí¨ Nexa Messenger</h1>
        <h2>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
        
        <form method="POST" action="/login">
            <input type="text" name="username" placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" required>
            <input type="password" name="password" placeholder="–ü–∞—Ä–æ–ª—å" required>
            <button type="submit">–í–æ–π—Ç–∏</button>
        </form>
        
        <p><a href="/register">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a> | <a href="/">–ì–ª–∞–≤–Ω–∞—è</a></p>
    </div>
</body>
</html>
'''

REGISTER_HTML = '''
<!DOCTYPE html>
<html>
<head>
    <title>Nexa Messenger - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</title>
    <style>
        body { font-family: Arial; background: #f0f0f0; padding: 50px; }
        .container { max-width: 400px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
        input { width: 100%; padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px; }
        button { width: 100%; padding: 10px; background: #28a745; color: white; border: none; border-radius: 5px; cursor: pointer; }
        .error { color: red; margin: 10px 0; }
        .success { color: green; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üí¨ Nexa Messenger</h1>
        <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
        
        <form method="POST" action="/register">
            <input type="text" name="username" placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" required>
            <input type="email" name="email" placeholder="Email" required>
            <input type="password" name="password" placeholder="–ü–∞—Ä–æ–ª—å" required>
            <input type="text" name="display_name" placeholder="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è" required>
            <button type="submit">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
        </form>
        
        <p><a href="/login">–í—Ö–æ–¥</a> | <a href="/">–ì–ª–∞–≤–Ω–∞—è</a></p>
    </div>
</body>
</html>
'''

CHAT_HTML = '''
<!DOCTYPE html>
<html>
<head>
    <title>Nexa Messenger - –ß–∞—Ç</title>
    <style>
        body { font-family: Arial; background: #f0f0f0; padding: 20px; }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { background: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }
        .chat-container { display: grid; grid-template-columns: 300px 1fr; gap: 20px; }
        .users-list { background: white; padding: 20px; border-radius: 10px; }
        .chat-area { background: white; padding: 20px; border-radius: 10px; }
        .user-item { padding: 10px; border-bottom: 1px solid #eee; cursor: pointer; }
        .user-item:hover { background: #f8f9fa; }
        .message { margin: 10px 0; padding: 10px; border-radius: 5px; }
        .message.own { background: #007bff; color: white; }
        .message.other { background: #e9ecef; }
        input, button { padding: 10px; margin: 5px; }
        .logout { background: #dc3545; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üí¨ Nexa Messenger</h1>
            <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {display_name}!</p>
            <a href="/logout" class="logout">–í—ã–π—Ç–∏</a>
        </div>
        
        <div class="chat-container">
            <div class="users-list">
                <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                {users_list}
            </div>
            
            <div class="chat-area">
                <h3>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∞—Ç–∞</h3>
                <div id="messages"></div>
                <div id="message-input" style="display: none;">
                    <input type="text" id="message-text" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...">
                    <button onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        let selectedUserId = null;
        
        function selectUser(userId, userName) {
            selectedUserId = userId;
            document.getElementById('message-input').style.display = 'block';
            loadMessages(userId);
        }
        
        function loadMessages(userId) {
            fetch('/api/messages/' + userId)
                .then(response => response.json())
                .then(messages => {
                    displayMessages(messages);
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
                });
        }
        
        function displayMessages(messages) {
            const container = document.getElementById('messages');
            container.innerHTML = '';
            
            messages.forEach(msg => {
                const div = document.createElement('div');
                div.className = 'message ' + (msg.is_own ? 'own' : 'other');
                div.innerHTML = msg.content + ' <small>(' + msg.timestamp + ')</small>';
                container.appendChild(div);
            });
        }
        
        function sendMessage() {
            const text = document.getElementById('message-text').value;
            if (!text || !selectedUserId) return;
            
            fetch('/send_message', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    content: text,
                    receiver_id: selectedUserId
                })
            }).then(() => {
                document.getElementById('message-text').value = '';
                loadMessages(selectedUserId);
            }).catch(error => {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            });
        }
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        setInterval(() => {
            if (selectedUserId) loadMessages(selectedUserId);
        }, 3000);
    </script>
</body>
</html>
'''

# –ú–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    try:
        global current_user
        if current_user:
            return redirect('/chat')
        return LOGIN_HTML
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ index: {e}")
        traceback.print_exc()
        return f"<h1>–û—à–∏–±–∫–∞</h1><p>{str(e)}"

@app.route('/register', methods=['GET', 'POST'])
def register():
    try:
        global current_user
        
        if request.method == 'POST':
            print("üìù –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            
            username = request.form.get('username', '').strip()
            email = request.form.get('email', '').strip()
            password = request.form.get('password', '').strip()
            display_name = request.form.get('display_name', '').strip()
            
            print(f"üìä –î–∞–Ω–Ω—ã–µ: username={username}, email={email}, display_name={display_name}")
            
            if not all([username, email, password, display_name]):
                print("‚ùå –ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                return REGISTER_HTML + '<div class="error">–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!</div>'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = get_user_by_username(username)
            if existing_user:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return REGISTER_HTML + '<div class="error">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</div>'
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}...")
            if create_user(username, email, password, display_name):
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return REGISTER_HTML + '<div class="success">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! <a href="/login">–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</a></div>'
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
                return REGISTER_HTML + '<div class="error">–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</div>'
        
        print("üìÑ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return REGISTER_HTML
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ register: {e}")
        traceback.print_exc()
        return f"<h1>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</h1><p>{str(e)}<br><a href='/'>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>"

@app.route('/login', methods=['GET', 'POST'])
def login():
    try:
        global current_user
        
        if request.method == 'POST':
            print("üîê –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥")
            
            username = request.form.get('username', '').strip()
            password = request.form.get('password', '').strip()
            
            print(f"üìä –î–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞: username={username}")
            
            if not username or not password:
                print("‚ùå –ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                return LOGIN_HTML + '<div class="error">–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å!</div>'
            
            user = get_user_by_username(username)
            if user and user[3] == password:  # user[3] - password
                print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
                current_user = {
                    'id': user[0],
                    'username': user[1],
                    'email': user[2],
                    'display_name': user[4]
                }
                return redirect('/chat')
            else:
                print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {username}")
                return LOGIN_HTML + '<div class="error">–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å!</div>'
        
        print("üìÑ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞")
        return LOGIN_HTML
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ login: {e}")
        traceback.print_exc()
        return f"<h1>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</h1><p>{str(e)}<br><a href='/'>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>"

@app.route('/logout')
def logout():
    try:
        global current_user
        current_user = None
        print("üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
        return redirect('/')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ logout: {e}")
        return redirect('/')

@app.route('/chat')
def chat():
    try:
        global current_user
        if not current_user:
            print("‚ùå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return redirect('/login')
        
        print(f"üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user['username']} –∑–∞—à–µ–ª –≤ —á–∞—Ç")
        users = get_all_users()
        users_list = ''
        for user in users:
            if user[0] != current_user['id']:
                users_list += f'<div class="user-item" onclick="selectUser({user[0]}, \'{user[2]}\')">{user[2]} (@{user[1]})</div>'
        
        return CHAT_HTML.format(
            display_name=current_user['display_name'],
            users_list=users_list
        )
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ chat: {e}")
        traceback.print_exc()
        return f"<h1>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</h1><p>{str(e)}<br><a href='/'>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>"

@app.route('/send_message', methods=['POST'])
def send_message():
    try:
        global current_user
        if not current_user:
            print("‚ùå –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return {'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}, 401
        
        print(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {current_user['username']}")
        
        data = request.get_json()
        content = data.get('content', '').strip()
        receiver_id = data.get('receiver_id')
        
        print(f"üìä –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: content='{content}', receiver_id={receiver_id}")
        
        if not content or not receiver_id:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return {'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}, 400
        
        if save_message(current_user['id'], receiver_id, content):
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {current_user['username']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            return {'success': True}
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {current_user['username']}")
            return {'error': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'}, 500
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_message: {e}")
        traceback.print_exc()
        return {'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, 500

@app.route('/api/messages/<int:user_id>')
def get_messages(user_id):
    try:
        global current_user
        if not current_user:
            print("‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return {'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}, 401
        
        print(f"üì• –ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {current_user['username']} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
        messages = get_messages_between_users(current_user['id'], user_id)
        
        result = []
        for msg in messages:
            result.append({
                'id': msg[0],
                'content': msg[4],
                'timestamp': msg[5],
                'is_own': msg[1] == current_user['id']
            })
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return result
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_messages: {e}")
        traceback.print_exc()
        return {'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, 500

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ Nexa Messenger (—É–ª—å—Ç—Ä–∞ –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)...")
        print(f"üåê PORT: {os.environ.get('PORT', '8080')}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("üìÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        if not init_db():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î")
            exit(1)
        
        port = int(os.environ.get('PORT', 8080))
        print(f"üö™ –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É: {port}")
        
        print("üè≠ –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º")
        app.run(host='0.0.0.0', port=port, debug=False)
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        traceback.print_exc()
        exit(1)

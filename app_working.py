#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Nexa Messenger - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è
–¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π Flask, –Ω–∏–∫–∞–∫–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
"""

import os
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from datetime import datetime
import sqlite3

# –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'nexa-messenger-secret-key-2024')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('nexa_messenger.db')
    c = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            email TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            display_name TEXT NOT NULL,
            is_online BOOLEAN DEFAULT 0,
            last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_admin BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π
    c.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sender_id INTEGER NOT NULL,
            receiver_id INTEGER NOT NULL,
            content TEXT NOT NULL,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (sender_id) REFERENCES users (id),
            FOREIGN KEY (receiver_id) REFERENCES users (id)
        )
    ''')
    
    conn.commit()
    conn.close()

def hash_password(password):
    # –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return str(hash(password) % 1000000)

def verify_password(password, password_hash):
    return str(hash(password) % 1000000) == password_hash

def get_user_by_username(username):
    conn = sqlite3.connect('nexa_messenger.db')
    c = conn.cursor()
    c.execute('SELECT * FROM users WHERE username = ?', (username,))
    user = c.fetchone()
    conn.close()
    return user

def create_user(username, email, password, display_name):
    conn = sqlite3.connect('nexa_messenger.db')
    c = conn.cursor()
    try:
        c.execute('''
            INSERT INTO users (username, email, password_hash, display_name)
            VALUES (?, ?, ?, ?)
        ''', (username, email, hash_password(password), display_name))
        conn.commit()
        conn.close()
        return True
    except:
        conn.close()
        return False

def get_all_users():
    conn = sqlite3.connect('nexa_messenger.db')
    c = conn.cursor()
    c.execute('SELECT id, username, display_name, is_online, last_seen FROM users')
    users = c.fetchall()
    conn.close()
    return users

def get_messages_between_users(user1_id, user2_id):
    conn = sqlite3.connect('nexa_messenger.db')
    c = conn.cursor()
    c.execute('''
        SELECT * FROM messages 
        WHERE (sender_id = ? AND receiver_id = ?) 
        OR (sender_id = ? AND receiver_id = ?)
        ORDER BY timestamp ASC
    ''', (user1_id, user2_id, user2_id, user1_id))
    messages = c.fetchall()
    conn.close()
    return messages

def save_message(sender_id, receiver_id, content):
    conn = sqlite3.connect('nexa_messenger.db')
    c = conn.cursor()
    c.execute('''
        INSERT INTO messages (sender_id, receiver_id, content)
        VALUES (?, ?, ?)
    ''', (sender_id, receiver_id, content))
    conn.commit()
    conn.close()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
current_user = None

# –ú–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    global current_user
    if current_user:
        return redirect('/chat')
    return render_template('login_simple.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    global current_user
    
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        email = request.form.get('email', '').strip()
        password = request.form.get('password', '').strip()
        display_name = request.form.get('display_name', '').strip()
        
        if not all([username, email, password, display_name]):
            flash('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!')
            return render_template('register_simple.html')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if get_user_by_username(username):
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
            return render_template('register_simple.html')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if create_user(username, email, password, display_name):
            flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.')
            return redirect('/login')
        else:
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
            return render_template('register_simple.html')
    
    return render_template('register_simple.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    global current_user
    
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '').strip()
        
        if not username or not password:
            flash('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å!')
            return render_template('login_simple.html')
        
        user = get_user_by_username(username)
        if user and verify_password(password, user[3]):  # user[3] - password_hash
            current_user = {
                'id': user[0],
                'username': user[1],
                'email': user[2],
                'display_name': user[4],
                'is_admin': user[7]
            }
            flash(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {current_user["display_name"]}!')
            return redirect('/chat')
        else:
            flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å!')
            return render_template('login_simple.html')
    
    return render_template('login_simple.html')

@app.route('/logout')
def logout():
    global current_user
    current_user = None
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!')
    return redirect('/')

@app.route('/chat')
def chat():
    global current_user
    if not current_user:
        return redirect('/login')
    
    users = get_all_users()
    return render_template('chat_simple.html', users=users, current_user=current_user)

@app.route('/chat/<int:user_id>')
def chat_with_user(user_id):
    global current_user
    if not current_user:
        return redirect('/login')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    conn = sqlite3.connect('nexa_messenger.db')
    c = conn.cursor()
    c.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    other_user = c.fetchone()
    conn.close()
    
    if not other_user:
        flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        return redirect('/chat')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = get_messages_between_users(current_user['id'], user_id)
    
    return render_template('chat_conversation_simple.html', 
                         other_user=other_user, 
                         messages=messages, 
                         current_user=current_user)

@app.route('/send_message', methods=['POST'])
def send_message():
    global current_user
    if not current_user:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401
    
    data = request.get_json()
    content = data.get('content', '').strip()
    receiver_id = data.get('receiver_id')
    
    if not content or not receiver_id:
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}), 400
    
    save_message(current_user['id'], receiver_id, content)
    
    return jsonify({
        'success': True,
        'message': '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    })

@app.route('/api/messages/<int:user_id>')
def get_messages(user_id):
    global current_user
    if not current_user:
        return jsonify({'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401
    
    messages = get_messages_between_users(current_user['id'], user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn = sqlite3.connect('nexa_messenger.db')
    c = conn.cursor()
    
    result = []
    for msg in messages:
        c.execute('SELECT display_name FROM users WHERE id = ?', (msg[1],))
        sender_name = c.fetchone()[0]
        
        result.append({
            'id': msg[0],
            'content': msg[4],
            'timestamp': msg[5],
            'sender_name': sender_name,
            'is_own': msg[1] == current_user['id']
        })
    
    conn.close()
    return jsonify(result)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ Nexa Messenger (–ø—Ä–æ—Å—Ç–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è)...")
        print(f"üìä SECRET_KEY: {app.secret_key[:20]}...")
        print(f"üåê PORT: {os.environ.get('PORT', '8080')}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("üìÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
        
        port = int(os.environ.get('PORT', 8080))
        print(f"üö™ –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É: {port}")
        
        print("üè≠ –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º")
        app.run(host='0.0.0.0', port=port, debug=False)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        exit(1)
